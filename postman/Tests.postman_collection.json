{
	"info": {
		"_postman_id": "c0c54312-f72f-41c7-b04f-2dffea0acd60",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"data\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"token\")\r",
									"    pm.expect(jsonData.data.token).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"user\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"role\")\r",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYjEzYTFiNjQxZTlmMjBlODMzMzk5YSIsImlhdCI6MTYyMjIyNzUzNSwiZXhwIjoxNjIyMzEzOTM1fQ.2IVV6srM5iUO5EUIe_zDBQMKFbweh0RP_h2-5bK8LfI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"octi.pro20@gmail.com\",\r\n    \"password\": \"cuchoplomo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Failure (Invalid credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYjEzYTFiNjQxZTlmMjBlODMzMzk5YSIsImlhdCI6MTYyMjIyNzUzNSwiZXhwIjoxNjIyMzEzOTM1fQ.2IVV6srM5iUO5EUIe_zDBQMKFbweh0RP_h2-5bK8LfI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"nonexistantemail@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Failure (Invalid request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"detail\")\r",
									"    pm.expect(jsonData.error.detail).to.be.an(\"array\")\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYjEzYTFiNjQxZTlmMjBlODMzMzk5YSIsImlhdCI6MTYyMjIyNzUzNSwiZXhwIjoxNjIyMzEzOTM1fQ.2IVV6srM5iUO5EUIe_zDBQMKFbweh0RP_h2-5bK8LfI",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"not a valid mail\",\r\n    \"password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all users",
			"item": [
				{
					"name": "Get All  - Success (Complete filters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"data\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"docs\")\r",
									"    pm.expect(jsonData.data.docs).to.be.an(\"array\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"totalDocs\")\r",
									"    pm.expect(jsonData.data.totalDocs).to.be.an(\"number\")    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/users?filter[name]=Octavio&filter[email]=octi.pro20@gmail.com&options[limit]=2&options[offset]=0&filter[lastname]=Peralta",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "filter[name]",
									"value": "Octavio"
								},
								{
									"key": "filter[email]",
									"value": "octi.pro20@gmail.com"
								},
								{
									"key": "options[limit]",
									"value": "2"
								},
								{
									"key": "options[offset]",
									"value": "0"
								},
								{
									"key": "filter[lastname]",
									"value": "Peralta"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All - Failure (Without Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{basepath}}/users?filter[name]=Octavio&filter[email]=octi.pro20@gmail.com&options[limit]=2&options[offset]=0&filter[lastname]=Peralta",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "filter[name]",
									"value": "Octavio"
								},
								{
									"key": "filter[email]",
									"value": "octi.pro20@gmail.com"
								},
								{
									"key": "options[limit]",
									"value": "2"
								},
								{
									"key": "options[offset]",
									"value": "0"
								},
								{
									"key": "filter[lastname]",
									"value": "Peralta"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Save User",
			"item": [
				{
					"name": "Create User  - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"data\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\")\r",
									"    pm.expect(jsonData.data.email).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"_id\")\r",
									"    pm.expect(jsonData.data._id).to.be.an(\"string\")\r",
									"\r",
									"    pm.environment.set(\"userId\", jsonData.data._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"randomNumber\", Math.random());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"registro originado por test\",\r\n    \"lastname\": \"Test\",\r\n    \"email\":  \"{{randomNumber}}@gmail.com\",  \r\n    \"password\":\"contraseñaDeTest\",\r\n    \"birthday\": \"10/24/1999\"    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User  - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 201\", function () {\r",
									"    pm.response.to.not.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"detail\")\r",
									"    pm.expect(jsonData.error.detail).to.be.an(\"array\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"randomNumber\", Math.random());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"registro de prueba\",\r\n    \"lastname\": \"Prueba\",\r\n    \"email\":  \"octi.pro20@gmail.com\",  \r\n    \"password\":\"contraseñaDeTest\",\r\n    \"birthday\": \"10/24/1999\"    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "Update User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"data\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\")\r",
									"    pm.expect(jsonData.data.email).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"_id\")\r",
									"    pm.expect(jsonData.data._id).to.be.an(\"string\")\r",
									"\r",
									"    pm.collectionVariables.set(\"userId\", jsonData.data._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"cambiadoDesdeOtroTest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"detail\")\r",
									"    pm.expect(jsonData.error.detail).to.be.an(\"array\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"cambiadoDesdeOtroTest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "123456abcdef"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"data\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\")\r",
									"    pm.expect(jsonData.data.email).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.data).to.have.property(\"_id\")\r",
									"    pm.expect(jsonData.data._id).to.be.an(\"string\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct properties\", function () {\r",
									"    let jsonData = pm.response.json()\r",
									"    pm.expect(jsonData).to.have.property(\"error\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"message\")\r",
									"    pm.expect(jsonData.error.message).to.be.an(\"string\")\r",
									"    pm.expect(jsonData.error).to.have.property(\"detail\")\r",
									"    pm.expect(jsonData.error.detail).to.be.an(\"array\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/users/:id",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}